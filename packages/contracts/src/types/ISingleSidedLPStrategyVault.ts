/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type StrategyVaultSettingsStruct = {
  deprecated_emergencySettlementSlippageLimitPercent: PromiseOrValue<BigNumberish>;
  maxPoolShare: PromiseOrValue<BigNumberish>;
  oraclePriceDeviationLimitPercent: PromiseOrValue<BigNumberish>;
  numRewardTokens: PromiseOrValue<BigNumberish>;
  forceClaimAfter: PromiseOrValue<BigNumberish>;
};

export type StrategyVaultSettingsStructOutput = [
  number,
  number,
  number,
  number,
  number
] & {
  deprecated_emergencySettlementSlippageLimitPercent: number;
  maxPoolShare: number;
  oraclePriceDeviationLimitPercent: number;
  numRewardTokens: number;
  forceClaimAfter: number;
};

export type InitParamsStruct = {
  name: PromiseOrValue<string>;
  borrowCurrencyId: PromiseOrValue<BigNumberish>;
  settings: StrategyVaultSettingsStruct;
};

export type InitParamsStructOutput = [
  string,
  number,
  StrategyVaultSettingsStructOutput
] & {
  name: string;
  borrowCurrencyId: number;
  settings: StrategyVaultSettingsStructOutput;
};

export type TradeParamsStruct = {
  dexId: PromiseOrValue<BigNumberish>;
  tradeType: PromiseOrValue<BigNumberish>;
  oracleSlippagePercentOrLimit: PromiseOrValue<BigNumberish>;
  exchangeData: PromiseOrValue<BytesLike>;
};

export type TradeParamsStructOutput = [number, number, BigNumber, string] & {
  dexId: number;
  tradeType: number;
  oracleSlippagePercentOrLimit: BigNumber;
  exchangeData: string;
};

export type SingleSidedRewardTradeParamsStruct = {
  sellToken: PromiseOrValue<string>;
  buyToken: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  tradeParams: TradeParamsStruct;
};

export type SingleSidedRewardTradeParamsStructOutput = [
  string,
  string,
  BigNumber,
  TradeParamsStructOutput
] & {
  sellToken: string;
  buyToken: string;
  amount: BigNumber;
  tradeParams: TradeParamsStructOutput;
};

export type VaultRewardStateStruct = {
  rewardToken: PromiseOrValue<string>;
  lastAccumulatedTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  emissionRatePerYear: PromiseOrValue<BigNumberish>;
  accumulatedRewardPerVaultShare: PromiseOrValue<BigNumberish>;
};

export type VaultRewardStateStructOutput = [
  string,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  rewardToken: string;
  lastAccumulatedTime: number;
  endTime: number;
  emissionRatePerYear: BigNumber;
  accumulatedRewardPerVaultShare: BigNumber;
};

export type RewardPoolStorageStruct = {
  poolType: PromiseOrValue<BigNumberish>;
  rewardPool: PromiseOrValue<string>;
  lastClaimTimestamp: PromiseOrValue<BigNumberish>;
};

export type RewardPoolStorageStructOutput = [number, string, number] & {
  poolType: number;
  rewardPool: string;
  lastClaimTimestamp: number;
};

export declare namespace ISingleSidedLPStrategyVault {
  export type SingleSidedLPStrategyVaultInfoStruct = {
    pool: PromiseOrValue<string>;
    singleSidedTokenIndex: PromiseOrValue<BigNumberish>;
    totalLPTokens: PromiseOrValue<BigNumberish>;
    totalVaultShares: PromiseOrValue<BigNumberish>;
    maxPoolShare: PromiseOrValue<BigNumberish>;
    oraclePriceDeviationLimitPercent: PromiseOrValue<BigNumberish>;
  };

  export type SingleSidedLPStrategyVaultInfoStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pool: string;
    singleSidedTokenIndex: number;
    totalLPTokens: BigNumber;
    totalVaultShares: BigNumber;
    maxPoolShare: BigNumber;
    oraclePriceDeviationLimitPercent: BigNumber;
  };
}

export interface ISingleSidedLPStrategyVaultInterface extends utils.Interface {
  functions: {
    "TOKENS()": FunctionFragment;
    "emergencyExit(uint256,bytes)": FunctionFragment;
    "getStrategyVaultInfo()": FunctionFragment;
    "getExchangeRate(uint256)": FunctionFragment;
    "initialize((string,uint16,(uint32,uint16,uint16,uint8,uint32)))": FunctionFragment;
    "isLocked()": FunctionFragment;
    "reinvestReward((address,address,uint256,(uint16,uint8,uint256,bytes))[],uint256)": FunctionFragment;
    "restoreVault(uint256,bytes)": FunctionFragment;
    "setStrategyVaultSettings((uint32,uint16,uint16,uint8,uint32))": FunctionFragment;
    "tradeTokensBeforeRestore((address,address,uint256,(uint16,uint8,uint256,bytes))[])": FunctionFragment;
    "claimAccountRewards(address)": FunctionFragment;
    "claimRewardTokens()": FunctionFragment;
    "deleverageAccount(address,address,address,uint16,int256)": FunctionFragment;
    "getAccountRewardClaim(address,uint256)": FunctionFragment;
    "getRewardDebt(address,address)": FunctionFragment;
    "getRewardSettings()": FunctionFragment;
    "migrateRewardPool(address,(uint8,address,uint32))": FunctionFragment;
    "updateAccountRewards(address,uint256,uint256,bool)": FunctionFragment;
    "updateRewardToken(uint256,address,uint128,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TOKENS"
      | "emergencyExit"
      | "getStrategyVaultInfo"
      | "getExchangeRate"
      | "initialize"
      | "isLocked"
      | "reinvestReward"
      | "restoreVault"
      | "setStrategyVaultSettings"
      | "tradeTokensBeforeRestore"
      | "claimAccountRewards"
      | "claimRewardTokens"
      | "deleverageAccount"
      | "getAccountRewardClaim"
      | "getRewardDebt"
      | "getRewardSettings"
      | "migrateRewardPool"
      | "updateAccountRewards"
      | "updateRewardToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "TOKENS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyVaultInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinvestReward",
    values: [SingleSidedRewardTradeParamsStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreVault",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyVaultSettings",
    values: [StrategyVaultSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeTokensBeforeRestore",
    values: [SingleSidedRewardTradeParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAccountRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleverageAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountRewardClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateRewardPool",
    values: [PromiseOrValue<string>, RewardPoolStorageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccountRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "TOKENS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinvestReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyVaultSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeTokensBeforeRestore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleverageAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountRewardClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardToken",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyExit(uint256,uint256[])": EventFragment;
    "VaultLocked()": EventFragment;
    "VaultUnlocked()": EventFragment;
    "StrategyVaultSettingsUpdated(tuple)": EventFragment;
    "VaultRewardTransfer(address,address,uint256)": EventFragment;
    "VaultRewardUpdate(address,uint128,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUnlocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategyVaultSettingsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRewardTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRewardUpdate"): EventFragment;
}

export interface EmergencyExitEventObject {
  poolClaimExit: BigNumber;
  exitBalances: BigNumber[];
}
export type EmergencyExitEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  EmergencyExitEventObject
>;

export type EmergencyExitEventFilter = TypedEventFilter<EmergencyExitEvent>;

export interface VaultLockedEventObject {}
export type VaultLockedEvent = TypedEvent<[], VaultLockedEventObject>;

export type VaultLockedEventFilter = TypedEventFilter<VaultLockedEvent>;

export interface VaultUnlockedEventObject {}
export type VaultUnlockedEvent = TypedEvent<[], VaultUnlockedEventObject>;

export type VaultUnlockedEventFilter = TypedEventFilter<VaultUnlockedEvent>;

export interface StrategyVaultSettingsUpdatedEventObject {
  settings: StrategyVaultSettingsStructOutput;
}
export type StrategyVaultSettingsUpdatedEvent = TypedEvent<
  [StrategyVaultSettingsStructOutput],
  StrategyVaultSettingsUpdatedEventObject
>;

export type StrategyVaultSettingsUpdatedEventFilter =
  TypedEventFilter<StrategyVaultSettingsUpdatedEvent>;

export interface VaultRewardTransferEventObject {
  token: string;
  account: string;
  amount: BigNumber;
}
export type VaultRewardTransferEvent = TypedEvent<
  [string, string, BigNumber],
  VaultRewardTransferEventObject
>;

export type VaultRewardTransferEventFilter =
  TypedEventFilter<VaultRewardTransferEvent>;

export interface VaultRewardUpdateEventObject {
  rewardToken: string;
  emissionRatePerYear: BigNumber;
  endTime: number;
}
export type VaultRewardUpdateEvent = TypedEvent<
  [string, BigNumber, number],
  VaultRewardUpdateEventObject
>;

export type VaultRewardUpdateEventFilter =
  TypedEventFilter<VaultRewardUpdateEvent>;

export interface ISingleSidedLPStrategyVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISingleSidedLPStrategyVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOKENS(
      overrides?: CallOverrides
    ): Promise<[string[], number[]] & { decimals: number[] }>;

    emergencyExit(
      claimToExit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStrategyVaultInfo(
      overrides?: CallOverrides
    ): Promise<
      [ISingleSidedLPStrategyVault.SingleSidedLPStrategyVaultInfoStructOutput]
    >;

    getExchangeRate(
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isLocked(overrides?: CallOverrides): Promise<[boolean]>;

    reinvestReward(
      trades: SingleSidedRewardTradeParamsStruct[],
      minPoolClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    restoreVault(
      minPoolClaim: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeTokensBeforeRestore(
      trades: SingleSidedRewardTradeParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAccountRewards(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleverageAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      currencyIndex: PromiseOrValue<BigNumberish>,
      depositUnderlyingInternal: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountRewardClaim(
      account: PromiseOrValue<string>,
      blockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards: BigNumber[] }>;

    getRewardDebt(
      rewardToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardDebt: BigNumber }>;

    getRewardSettings(
      overrides?: CallOverrides
    ): Promise<
      [
        VaultRewardStateStructOutput[],
        StrategyVaultSettingsStructOutput,
        RewardPoolStorageStructOutput
      ] & {
        v: VaultRewardStateStructOutput[];
        s: StrategyVaultSettingsStructOutput;
        r: RewardPoolStorageStructOutput;
      }
    >;

    migrateRewardPool(
      poolToken: PromiseOrValue<string>,
      newRewardPool: RewardPoolStorageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAccountRewards(
      account: PromiseOrValue<string>,
      vaultShares: PromiseOrValue<BigNumberish>,
      totalVaultSharesBefore: PromiseOrValue<BigNumberish>,
      isMint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardToken(
      index: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      emissionRatePerYear: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TOKENS(
    overrides?: CallOverrides
  ): Promise<[string[], number[]] & { decimals: number[] }>;

  emergencyExit(
    claimToExit: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStrategyVaultInfo(
    overrides?: CallOverrides
  ): Promise<ISingleSidedLPStrategyVault.SingleSidedLPStrategyVaultInfoStructOutput>;

  getExchangeRate(
    maturity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isLocked(overrides?: CallOverrides): Promise<boolean>;

  reinvestReward(
    trades: SingleSidedRewardTradeParamsStruct[],
    minPoolClaim: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  restoreVault(
    minPoolClaim: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategyVaultSettings(
    settings: StrategyVaultSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeTokensBeforeRestore(
    trades: SingleSidedRewardTradeParamsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAccountRewards(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleverageAccount(
    account: PromiseOrValue<string>,
    vault: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    currencyIndex: PromiseOrValue<BigNumberish>,
    depositUnderlyingInternal: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountRewardClaim(
    account: PromiseOrValue<string>,
    blockTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRewardDebt(
    rewardToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardSettings(
    overrides?: CallOverrides
  ): Promise<
    [
      VaultRewardStateStructOutput[],
      StrategyVaultSettingsStructOutput,
      RewardPoolStorageStructOutput
    ] & {
      v: VaultRewardStateStructOutput[];
      s: StrategyVaultSettingsStructOutput;
      r: RewardPoolStorageStructOutput;
    }
  >;

  migrateRewardPool(
    poolToken: PromiseOrValue<string>,
    newRewardPool: RewardPoolStorageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAccountRewards(
    account: PromiseOrValue<string>,
    vaultShares: PromiseOrValue<BigNumberish>,
    totalVaultSharesBefore: PromiseOrValue<BigNumberish>,
    isMint: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardToken(
    index: PromiseOrValue<BigNumberish>,
    rewardToken: PromiseOrValue<string>,
    emissionRatePerYear: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TOKENS(
      overrides?: CallOverrides
    ): Promise<[string[], number[]] & { decimals: number[] }>;

    emergencyExit(
      claimToExit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStrategyVaultInfo(
      overrides?: CallOverrides
    ): Promise<ISingleSidedLPStrategyVault.SingleSidedLPStrategyVaultInfoStructOutput>;

    getExchangeRate(
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      params: InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    reinvestReward(
      trades: SingleSidedRewardTradeParamsStruct[],
      minPoolClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        rewardToken: string;
        amountSold: BigNumber;
        poolClaimAmount: BigNumber;
      }
    >;

    restoreVault(
      minPoolClaim: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeTokensBeforeRestore(
      trades: SingleSidedRewardTradeParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimAccountRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewardTokens(overrides?: CallOverrides): Promise<void>;

    deleverageAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      currencyIndex: PromiseOrValue<BigNumberish>,
      depositUnderlyingInternal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vaultSharesFromLiquidation: BigNumber;
        depositAmountPrimeCash: BigNumber;
      }
    >;

    getAccountRewardClaim(
      account: PromiseOrValue<string>,
      blockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRewardDebt(
      rewardToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardSettings(
      overrides?: CallOverrides
    ): Promise<
      [
        VaultRewardStateStructOutput[],
        StrategyVaultSettingsStructOutput,
        RewardPoolStorageStructOutput
      ] & {
        v: VaultRewardStateStructOutput[];
        s: StrategyVaultSettingsStructOutput;
        r: RewardPoolStorageStructOutput;
      }
    >;

    migrateRewardPool(
      poolToken: PromiseOrValue<string>,
      newRewardPool: RewardPoolStorageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccountRewards(
      account: PromiseOrValue<string>,
      vaultShares: PromiseOrValue<BigNumberish>,
      totalVaultSharesBefore: PromiseOrValue<BigNumberish>,
      isMint: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardToken(
      index: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      emissionRatePerYear: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyExit(uint256,uint256[])"(
      poolClaimExit?: null,
      exitBalances?: null
    ): EmergencyExitEventFilter;
    EmergencyExit(
      poolClaimExit?: null,
      exitBalances?: null
    ): EmergencyExitEventFilter;

    "VaultLocked()"(): VaultLockedEventFilter;
    VaultLocked(): VaultLockedEventFilter;

    "VaultUnlocked()"(): VaultUnlockedEventFilter;
    VaultUnlocked(): VaultUnlockedEventFilter;

    "StrategyVaultSettingsUpdated(tuple)"(
      settings?: null
    ): StrategyVaultSettingsUpdatedEventFilter;
    StrategyVaultSettingsUpdated(
      settings?: null
    ): StrategyVaultSettingsUpdatedEventFilter;

    "VaultRewardTransfer(address,address,uint256)"(
      token?: null,
      account?: null,
      amount?: null
    ): VaultRewardTransferEventFilter;
    VaultRewardTransfer(
      token?: null,
      account?: null,
      amount?: null
    ): VaultRewardTransferEventFilter;

    "VaultRewardUpdate(address,uint128,uint32)"(
      rewardToken?: null,
      emissionRatePerYear?: null,
      endTime?: null
    ): VaultRewardUpdateEventFilter;
    VaultRewardUpdate(
      rewardToken?: null,
      emissionRatePerYear?: null,
      endTime?: null
    ): VaultRewardUpdateEventFilter;
  };

  estimateGas: {
    TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(
      claimToExit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStrategyVaultInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isLocked(overrides?: CallOverrides): Promise<BigNumber>;

    reinvestReward(
      trades: SingleSidedRewardTradeParamsStruct[],
      minPoolClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    restoreVault(
      minPoolClaim: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeTokensBeforeRestore(
      trades: SingleSidedRewardTradeParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAccountRewards(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleverageAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      currencyIndex: PromiseOrValue<BigNumberish>,
      depositUnderlyingInternal: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountRewardClaim(
      account: PromiseOrValue<string>,
      blockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardDebt(
      rewardToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardSettings(overrides?: CallOverrides): Promise<BigNumber>;

    migrateRewardPool(
      poolToken: PromiseOrValue<string>,
      newRewardPool: RewardPoolStorageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAccountRewards(
      account: PromiseOrValue<string>,
      vaultShares: PromiseOrValue<BigNumberish>,
      totalVaultSharesBefore: PromiseOrValue<BigNumberish>,
      isMint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardToken(
      index: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      emissionRatePerYear: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyExit(
      claimToExit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStrategyVaultInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRate(
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinvestReward(
      trades: SingleSidedRewardTradeParamsStruct[],
      minPoolClaim: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    restoreVault(
      minPoolClaim: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeTokensBeforeRestore(
      trades: SingleSidedRewardTradeParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAccountRewards(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleverageAccount(
      account: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      currencyIndex: PromiseOrValue<BigNumberish>,
      depositUnderlyingInternal: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountRewardClaim(
      account: PromiseOrValue<string>,
      blockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardDebt(
      rewardToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateRewardPool(
      poolToken: PromiseOrValue<string>,
      newRewardPool: RewardPoolStorageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAccountRewards(
      account: PromiseOrValue<string>,
      vaultShares: PromiseOrValue<BigNumberish>,
      totalVaultSharesBefore: PromiseOrValue<BigNumberish>,
      isMint: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardToken(
      index: PromiseOrValue<BigNumberish>,
      rewardToken: PromiseOrValue<string>,
      emissionRatePerYear: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
