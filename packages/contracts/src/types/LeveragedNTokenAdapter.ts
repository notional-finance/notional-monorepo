/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BalanceActionWithTradesStruct = {
  actionType: PromiseOrValue<BigNumberish>;
  currencyId: PromiseOrValue<BigNumberish>;
  depositActionAmount: PromiseOrValue<BigNumberish>;
  withdrawAmountInternalPrecision: PromiseOrValue<BigNumberish>;
  withdrawEntireCashBalance: PromiseOrValue<boolean>;
  redeemToUnderlying: PromiseOrValue<boolean>;
  trades: PromiseOrValue<BytesLike>[];
};

export type BalanceActionWithTradesStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  string[]
] & {
  actionType: number;
  currencyId: number;
  depositActionAmount: BigNumber;
  withdrawAmountInternalPrecision: BigNumber;
  withdrawEntireCashBalance: boolean;
  redeemToUnderlying: boolean;
  trades: string[];
};

export interface LeveragedNTokenAdapterInterface extends utils.Interface {
  functions: {
    "Notional()": FunctionFragment;
    "doLeveragedNToken((uint8,uint16,uint256,uint256,bool,bool,bytes32[])[],uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "notionalCallback(address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Notional"
      | "doLeveragedNToken"
      | "name"
      | "notionalCallback"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Notional", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doLeveragedNToken",
    values: [BalanceActionWithTradesStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notionalCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "Notional", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doLeveragedNToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notionalCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LeveragedNTokenAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeveragedNTokenAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Notional(overrides?: CallOverrides): Promise<[string]>;

    doLeveragedNToken(
      borrowAction: BalanceActionWithTradesStruct[],
      convertCashAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notionalCallback(
      sender: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  Notional(overrides?: CallOverrides): Promise<string>;

  doLeveragedNToken(
    borrowAction: BalanceActionWithTradesStruct[],
    convertCashAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  notionalCallback(
    sender: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    callbackData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Notional(overrides?: CallOverrides): Promise<string>;

    doLeveragedNToken(
      borrowAction: BalanceActionWithTradesStruct[],
      convertCashAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    notionalCallback(
      sender: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    Notional(overrides?: CallOverrides): Promise<BigNumber>;

    doLeveragedNToken(
      borrowAction: BalanceActionWithTradesStruct[],
      convertCashAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notionalCallback(
      sender: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Notional(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doLeveragedNToken(
      borrowAction: BalanceActionWithTradesStruct[],
      convertCashAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notionalCallback(
      sender: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      callbackData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
