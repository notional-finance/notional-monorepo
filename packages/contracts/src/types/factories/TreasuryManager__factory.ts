/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TreasuryManager,
  TreasuryManagerInterface,
} from "../TreasuryManager";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_notional",
        type: "address",
        internalType: "contract NotionalTreasuryAction",
      },
      {
        name: "_weth",
        type: "address",
        internalType: "contract WETH9",
      },
      {
        name: "_tradingModule",
        type: "address",
        internalType: "contract ITradingModule",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "BALANCER_POOL_TOKEN",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "BALANCER_VAULT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVault",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MAXIMUM_COOL_DOWN_PERIOD_SECONDS",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MAX_ORACLE_WINDOW_SIZE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "NOTE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "NOTE_ETH_POOL_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "NOTE_INDEX",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "NOTIONAL",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract NotionalTreasuryAction",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "TRADING_MODULE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ITradingModule",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "WETH",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract WETH9",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "WETH_INDEX",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "_getNOTESpotPrice",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approveBalancer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimBAL",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "claimVaultRewardTokens",
    inputs: [
      {
        name: "vault",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "coolDownTimeInSeconds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "executeTrade",
    inputs: [
      {
        name: "trade",
        type: "tuple",
        internalType: "struct Trade",
        components: [
          {
            name: "tradeType",
            type: "uint8",
            internalType: "enum TradeType",
          },
          {
            name: "sellToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "buyToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "limit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "exchangeData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "dexId",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [
      {
        name: "amountSold",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amountBought",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "harvestAssetInterestFromNotional",
    inputs: [
      {
        name: "currencies",
        type: "uint16[]",
        internalType: "uint16[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "harvestAssetsFromNotional",
    inputs: [
      {
        name: "currencies",
        type: "uint16[]",
        internalType: "uint16[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "_manager",
        type: "address",
        internalType: "address",
      },
      {
        name: "_coolDownTimeInSeconds",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "investWETHAndNOTE",
    inputs: [
      {
        name: "wethAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "noteAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "minBPT",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "trade",
        type: "tuple",
        internalType: "struct Trade",
        components: [
          {
            name: "tradeType",
            type: "uint8",
            internalType: "enum TradeType",
          },
          {
            name: "sellToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "buyToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "limit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "exchangeData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "receivedBPT",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "burnedNote",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "lastInvestTimestamp",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "manager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "noteBurnPercent",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "notePurchaseLimit",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "priceOracleWindowInSeconds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "reinvestVaultReward",
    inputs: [
      {
        name: "vault",
        type: "address",
        internalType: "address",
      },
      {
        name: "tradesPerRewardToken",
        type: "tuple[][]",
        internalType: "struct IStrategyVault.SingleSidedRewardTradeParams[][]",
        components: [
          {
            name: "sellToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "buyToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "tradeParams",
            type: "tuple",
            internalType: "struct IStrategyVault.TradeParams",
            components: [
              {
                name: "dexId",
                type: "uint16",
                internalType: "uint16",
              },
              {
                name: "tradeType",
                type: "uint8",
                internalType: "enum TradeType",
              },
              {
                name: "oracleSlippagePercentOrLimit",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "exchangeData",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
      {
        name: "minPoolClaims",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [
      {
        name: "rewardTokens",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "amountsSold",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "poolClaimAmounts",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "sNOTE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IStakedNote",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setCoolDownTime",
    inputs: [
      {
        name: "_coolDownTimeInSeconds",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setManager",
    inputs: [
      {
        name: "newManager",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setNOTEPurchaseLimit",
    inputs: [
      {
        name: "purchaseLimit",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setNoteBurnPercent",
    inputs: [
      {
        name: "_noteBurnPercent",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setPriceOracleWindow",
    inputs: [
      {
        name: "_priceOracleWindowInSeconds",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "direct",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "renounce",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeTo",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "wrapToWETH",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AdminChanged",
    inputs: [
      {
        name: "previousAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AssetInterestHarvested",
    inputs: [
      {
        name: "currencies",
        type: "uint16[]",
        indexed: false,
        internalType: "uint16[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AssetsHarvested",
    inputs: [
      {
        name: "currencies",
        type: "uint16[]",
        indexed: false,
        internalType: "uint16[]",
      },
      {
        name: "amounts",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "AssetsInvested",
    inputs: [
      {
        name: "wethAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "noteAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BeaconUpgraded",
    inputs: [
      {
        name: "beacon",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InvestmentCoolDownUpdated",
    inputs: [
      {
        name: "newCoolDownTimeSeconds",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ManagementTransferred",
    inputs: [
      {
        name: "prevManager",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newManager",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NOTEPurchaseLimitUpdated",
    inputs: [
      {
        name: "purchaseLimit",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NoteBurned",
    inputs: [
      {
        name: "amountBurned",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PriceOracleWindowUpdated",
    inputs: [
      {
        name: "_priceOracleWindowInSeconds",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TradeExecuted",
    inputs: [
      {
        name: "sellToken",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "buyToken",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sellAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "buyAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultRewardReinvested",
    inputs: [
      {
        name: "vault",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "rewardToken",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amountSold",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "poolClaimAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "VaultRewardTokensClaimed",
    inputs: [
      {
        name: "vault",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "rewardTokens",
        type: "address[]",
        indexed: false,
        internalType: "contract IERC20[]",
      },
      {
        name: "claimedBalances",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidChain",
    inputs: [],
  },
] as const;

export class TreasuryManager__factory {
  static readonly abi = _abi;
  static createInterface(): TreasuryManagerInterface {
    return new utils.Interface(_abi) as TreasuryManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreasuryManager {
    return new Contract(address, _abi, signerOrProvider) as TreasuryManager;
  }
}
